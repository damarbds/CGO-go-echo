// Code generated by mockery v1.0.0
package mocks

import (
	context "context"
	"github.com/models"
)
import mock "github.com/stretchr/testify/mock"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Usecase) ExchangeRatesApi(ctx context.Context, base string , symbols string) (models.CurrencyExChangeRate, error) {
	ret := _m.Called(ctx, base,symbols)

	var r0 models.CurrencyExChangeRate
	if rf, ok := ret.Get(0).(func(context.Context,string,string) models.CurrencyExChangeRate); ok {
		r0 = rf(ctx,base,symbols)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.CurrencyExChangeRate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string,string) error); ok {
		r1 = rf(ctx, base,symbols)
	} else {
		r1 = ret.Error(1)
	}

	return r0,r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Usecase) ExchangeRatesWithApi(ctx context.Context, base string , symbols string) (models.CurrencyExChangeRate, error) {
	ret := _m.Called(ctx, base,symbols)

	var r0 models.CurrencyExChangeRate
	if rf, ok := ret.Get(0).(func(context.Context,string,string) models.CurrencyExChangeRate); ok {
		r0 = rf(ctx,base,symbols)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.CurrencyExChangeRate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string,string) error); ok {
		r1 = rf(ctx, base,symbols)
	} else {
		r1 = ret.Error(1)
	}

	return r0,r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Usecase) ExchangeFreeCurrconv(ctx context.Context, exchangeKey string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, exchangeKey)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context,string) map[string]interface{}); ok {
		r0 = rf(ctx,exchangeKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, exchangeKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0,r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Usecase) Exchange(ctx context.Context, exchangeKey string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, exchangeKey)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context,string) map[string]interface{}); ok {
		r0 = rf(ctx,exchangeKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, exchangeKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0,r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Usecase) Insert(ctx context.Context)error {
	ret := _m.Called(ctx)

	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(0)
	}

	return r1
}
