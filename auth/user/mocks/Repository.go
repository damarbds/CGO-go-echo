// Code generated by mockery v1.0.0
package mocks

import (
	context "context"

	"github.com/models"

	mock "github.com/stretchr/testify/mock"
)

// repository is an autogenerated mock type for the repository type
type Repository struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Repository) Fetch(ctx context.Context, cursor string, num int64) (res []*models.User, nextCursor string, err error) {
	ret := _m.Called(ctx, cursor,num)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(context.Context, string,int64) []*models.User); ok {
		r0 = rf(ctx, cursor,num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string,int64) string); ok {
		r1 = rf(ctx, cursor,num)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string,int64) error); ok {
		r2 = rf(ctx, cursor,num)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1,r2
}

// Store provides a mock function with given fields: ctx, a
func (_m *Repository) GetByID(ctx context.Context, id string) (*models.User, error) {
	ret := _m.Called(ctx, id)


	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Repository) GetByUserEmail(ctx context.Context, userEmail string) (*models.User, error) {
	ret := _m.Called(ctx, userEmail)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, a
func (_m *Repository) GetByUserNumberOTP(ctx context.Context, phoneNumber string, otp string) (*models.User, error) {
	ret := _m.Called(ctx, phoneNumber,otp)


	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string,string) *models.User); ok {
		r0 = rf(ctx, phoneNumber,otp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string,string) error); ok {
		r1 = rf(ctx, phoneNumber,otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Repository) Update(ctx context.Context, ar *models.User) error {
	ret := _m.Called(ctx, ar)

	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, ar)
	} else {
		r1 = ret.Error(0)
	}

	return r1
}

// Store provides a mock function with given fields: ctx, a
func (_m *Repository) Insert(ctx context.Context, a *models.User) error {
	ret := _m.Called(ctx, a)

	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, a)
	} else {
		r1 = ret.Error(0)
	}

	return r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Repository) Delete(ctx context.Context, id string, deleted_by string) error {
	ret := _m.Called(ctx, id,deleted_by)

	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context,string,string) error); ok {
		r1 = rf(ctx, id,deleted_by)
	} else {
		r1 = ret.Error(0)
	}

	return r1
}

// Store provides a mock function with given fields: ctx, a
func (_m *Repository) GetCreditByID(ctx context.Context, id string) (int, error) {
	ret := _m.Called(ctx, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Repository) Count(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, a
func (_m *Repository) List(ctx context.Context, limit, offset int, search string) ([]*models.User, error) {
	ret := _m.Called(ctx, limit,offset,search)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(context.Context,int,int,string) []*models.User); ok {
		r0 = rf(ctx,limit,offset,search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context,int,int,string) error); ok {
		r1 = rf(ctx,limit,offset,search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Repository) UpdatePointByID(ctx context.Context, point float64, id string) error {
	ret := _m.Called(ctx, point,id)

	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context,float64,string) error); ok {
		r1 = rf(ctx, point,id)
	} else {
		r1 = ret.Error(0)
	}

	return r1
}

// Store provides a mock function with given fields: ctx, a
func (_m *Repository) 	SubscriptionUser(ctx context.Context, s *models.Subscribe) error {
	ret := _m.Called(ctx, s)

	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Subscribe) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(0)
	}

	return r1
}
