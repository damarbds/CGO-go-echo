// Code generated by mockery v1.0.0
package mocks

import (
	context "context"
	"github.com/models"
)
import mock "github.com/stretchr/testify/mock"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Usecase) Update(ctx context.Context, ar *models.NewCommandAdmin, user string) error {
	ret := _m.Called(ctx, ar,user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NewCommandAdmin,string) error); ok {
		r0 = rf(ctx, ar,user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Usecase) Create(ctx context.Context, ar *models.NewCommandAdmin, user string) error {
	ret := _m.Called(ctx, ar,user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NewCommandAdmin,string) error); ok {
		r0 = rf(ctx, ar,user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Usecase) Login(ctx context.Context, ar *models.Login) (*models.GetToken, error) {
	ret := _m.Called(ctx, ar)

	var r0 *models.GetToken
	if rf, ok := ret.Get(0).(func(context.Context, *models.Login) *models.GetToken); ok {
		r0 = rf(ctx, ar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Login) error); ok {
		r1 = rf(ctx, ar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitle provides a mock function with given fields: ctx, title
func (_m *Usecase) ValidateTokenAdmin(ctx context.Context, token string) (*models.AdminDto, error) {
	ret := _m.Called(ctx, token)

	var r0 *models.AdminDto
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.AdminDto); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AdminDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *Usecase) GetAdminInfo(ctx context.Context, token string) (*models.AdminDto, error) {
	ret := _m.Called(ctx, token)

	var r0 *models.AdminDto
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.AdminDto); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AdminDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

