// Code generated by mockery v1.0.0
package mocks

import (
	context "context"
	"github.com/models"

	mock "github.com/stretchr/testify/mock"
)

// repository is an autogenerated mock type for the repository type
type Repository struct {
	mock.Mock
}
// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Repository)  Insert(ctx context.Context,review models.Review)(string,error) {
	ret := _m.Called(ctx, review)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, models.Review) string); ok {
		r0 = rf(ctx, review)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Review) error); ok {
		r1 = rf(ctx, review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Repository) CountRating(ctx context.Context, rating int, expID string) (int, error) {
	ret := _m.Called(ctx, rating,expID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int,string) int); ok {
		r0 = rf(ctx, rating,expID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int,string) error); ok {
		r1 = rf(ctx, rating,expID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Repository) GetByExpId(ctx context.Context, expID, sortBy string, rating, limit, offset int,userId string) ([]*models.Review, error) {
	ret := _m.Called(ctx, expID,sortBy,rating,limit,offset,userId)

	var r0 []*models.Review
	if rf, ok := ret.Get(0).(func(context.Context, string,string,int,int,int,string) []*models.Review); ok {
		r0 = rf(ctx, expID,sortBy,rating,limit,offset,userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string,string,int,int,int,string) error); ok {
		r1 = rf(ctx, expID,sortBy,rating,limit,offset,userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
