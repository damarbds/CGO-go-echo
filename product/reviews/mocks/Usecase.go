// Code generated by mockery v1.0.0
package mocks

import (
	context "context"
	"github.com/models"
)
import mock "github.com/stretchr/testify/mock"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Usecase) 	CreateReviews(ctx context.Context,command models.NewReviewCommand,token string)(*models.NewReviewCommand,error) {
	ret := _m.Called(ctx,command,token)

	var r0 *models.NewReviewCommand
	if rf, ok := ret.Get(0).(func(context.Context,models.NewReviewCommand,string) *models.NewReviewCommand); ok {
		r0 = rf(ctx,command,token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NewReviewCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context,models.NewReviewCommand,string) error); ok {
		r1 = rf(ctx,command,token)
	} else {
		r1 = ret.Error(1)
	}

	return r0,r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Usecase) GetReviewsByExpId(ctx context.Context, exp_id, sortBy string, rating, limit, offset int) ([]*models.ReviewDto, error) {
	ret := _m.Called(ctx, exp_id,sortBy,rating,limit,offset)

	var r0 []*models.ReviewDto
	if rf, ok := ret.Get(0).(func(context.Context,string,string,int,int,int) []*models.ReviewDto); ok {
		r0 = rf(ctx,exp_id,sortBy,rating,limit,offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ReviewDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context,string,string,int,int,int) error); ok {
		r1 = rf(ctx,exp_id,sortBy,rating,limit,offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0,r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Usecase) GetReviewsByExpIdWithPagination(ctx context.Context, page, limit, offset, rating int, sortBy, exp_id string) (*models.ReviewsWithPagination, error) {
	ret := _m.Called(ctx, page,limit,offset,rating,sortBy,exp_id)

	var r0 *models.ReviewsWithPagination
	if rf, ok := ret.Get(0).(func(context.Context, int,int,int,int,string,string) *models.ReviewsWithPagination); ok {
		r0 = rf(ctx, page,limit,offset,rating,sortBy,exp_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ReviewsWithPagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int,int,int,int,string,string) error); ok {
		r1 = rf(ctx, page,limit,offset,rating,sortBy,exp_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
