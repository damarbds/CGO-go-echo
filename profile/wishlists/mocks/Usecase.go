// Code generated by mockery v1.0.0
package mocks

import (
	context "context"
	"github.com/models"
)
import mock "github.com/stretchr/testify/mock"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Usecase) List(ctx context.Context, token string,	page int, limit int, offset int,expId string) (*models.WishlistOutWithPagination, error) {
	ret := _m.Called(ctx,token,page,limit,offset,expId)

	var r0 *models.WishlistOutWithPagination
	if rf, ok := ret.Get(0).(func(context.Context,string,int,int,int,string) *models.WishlistOutWithPagination); ok {
		r0 = rf(ctx,token,page,limit,offset,expId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WishlistOutWithPagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context,string,int,int,int,string) error); ok {
		r1 = rf(ctx,token,page,limit,offset,expId)
	} else {
		r1 = ret.Error(1)
	}

	return r0,r1
}

// GetByTitle provides a mock function with given fields: ctx, title
func (_m *Usecase) Insert(ctx context.Context, wl *models.WishlistIn, token string) (string, error) {
	ret := _m.Called(ctx, wl,token)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *models.WishlistIn,string) string); ok {
		r0 = rf(ctx, wl,token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.WishlistIn,string) error); ok {
		r1 = rf(ctx, wl,token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

