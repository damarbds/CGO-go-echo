// Code generated by mockery v1.0.0
package mocks

import (
	context "context"
	"github.com/models"

	mock "github.com/stretchr/testify/mock"
)

// repository is an autogenerated mock type for the repository type
type Repository struct {
	mock.Mock
}
func (_m *Repository) Count(ctx context.Context, userID string) (int, error) {
	ret := _m.Called(ctx,userID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context,string) int); ok {
		r0 = rf(ctx,userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context,string) error); ok {
		r1 = rf(ctx,userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteByUserIdAndExpIdORTransId(ctx context.Context,userId string,expId string,transId string,deletedBy string)error {
	ret := _m.Called(ctx, userId,expId,transId,deletedBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string,string,string,string) error); ok {
		r0 = rf(ctx, userId,expId,transId,deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
func (_m *Repository)List(ctx context.Context, userID string,limit, offset int,expId string) ([]*models.WishlistObj, error) {
	ret := _m.Called(ctx,userID,limit,offset,expId)

	var r0 []*models.WishlistObj
	if rf, ok := ret.Get(0).(func(context.Context,string,int,int,string) []*models.WishlistObj); ok {
		r0 = rf(ctx,userID,limit,offset,expId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.WishlistObj)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context,string,int,int,string) error); ok {
		r1 = rf(ctx,userID,limit,offset,expId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Repository) GetByUserAndExpId(ctx context.Context, userID string, expId string,transId string) ([]*models.WishlistObj, error) {
	ret := _m.Called(ctx, userID,expId,transId)

	var r0 []*models.WishlistObj
	if rf, ok := ret.Get(0).(func(context.Context, string,string,string) []*models.WishlistObj); ok {
		r0 = rf(ctx,  userID,expId,transId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.WishlistObj)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string,string,string) error); ok {
		r1 = rf(ctx, userID,expId,transId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Repository) Insert(ctx context.Context, wl *models.Wishlist) (*models.Wishlist, error) {
	ret := _m.Called(ctx, wl)

	var r0 *models.Wishlist
	if rf, ok := ret.Get(0).(func(context.Context, *models.Wishlist) *models.Wishlist); ok {
		r0 = rf(ctx, wl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wishlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Wishlist) error); ok {
		r1 = rf(ctx, wl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

