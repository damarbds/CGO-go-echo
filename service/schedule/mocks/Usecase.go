// Code generated by mockery v1.0.0
package mocks

import (
	context "context"
	"github.com/models"
)
import mock "github.com/stretchr/testify/mock"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Usecase) GetScheduleByMerchantId(ctx context.Context,merchantId  string,date string)(*models.ScheduleDtoObj,error) {
	ret := _m.Called(ctx, merchantId,date)

	var r0 *models.ScheduleDtoObj
	if rf, ok := ret.Get(0).(func(context.Context, string,string) *models.ScheduleDtoObj); ok {
		r0 = rf(ctx, merchantId,date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ScheduleDtoObj)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string,string) error); ok {
		r1 = rf(ctx, merchantId,date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitle provides a mock function with given fields: ctx, title
func (_m *Usecase) InsertSchedule(ctx context.Context,command *models.NewCommandSchedule)(*models.NewCommandSchedule,error) {
	ret := _m.Called(ctx, command)

	var r0 *models.NewCommandSchedule
	if rf, ok := ret.Get(0).(func(context.Context, *models.NewCommandSchedule) *models.NewCommandSchedule); ok {
		r0 = rf(ctx, command)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NewCommandSchedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.NewCommandSchedule) error); ok {
		r1 = rf(ctx, command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}


