// Code generated by mockery v1.0.0
package mocks

import (
	context "context"
	"github.com/models"

	mock "github.com/stretchr/testify/mock"
)

// repository is an autogenerated mock type for the repository type
type Repository struct {
	mock.Mock
}
func (_m *Repository) GetTimeByTransId(ctx context.Context,transId string)([]*models.ScheduleTime,error) {
	ret := _m.Called(ctx,transId)

	var r0 []*models.ScheduleTime
	if rf, ok := ret.Get(0).(func(context.Context,string) []*models.ScheduleTime); ok {
		r0 = rf(ctx,transId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ScheduleTime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context,string) error); ok {
		r1 = rf(ctx,transId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) GetYearByTransId(ctx context.Context,transId string,arrivalTime string ,departureTime string)([]*models.ScheduleYear,error) {
	ret := _m.Called(ctx, transId,arrivalTime,departureTime)

	var r1 []*models.ScheduleYear
	if rf, ok := ret.Get(1).(func(context.Context,string,string,string) []*models.ScheduleYear); ok {
		r1 = rf(ctx,transId,arrivalTime,departureTime)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*models.ScheduleYear)
		}
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string,string,string) error); ok {
		r0 = rf(ctx, transId,arrivalTime,departureTime)
	} else {
		r0 = ret.Error(0)
	}

	return r1,r0
}
func (_m *Repository) GetMonthByTransId(ctx context.Context,transId string,year int,arrivalTime string ,departureTime string)([]*models.ScheduleMonth,error) {
	ret := _m.Called(ctx,transId,year,arrivalTime,departureTime)

	var r0 []*models.ScheduleMonth
	if rf, ok := ret.Get(0).(func(context.Context,string,int,string,string) []*models.ScheduleMonth); ok {
		r0 = rf(ctx,transId,year,arrivalTime,departureTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ScheduleMonth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context,string,int,string,string) error); ok {
		r1 = rf(ctx,transId,year,arrivalTime,departureTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Repository) GetDayByTransId(ctx context.Context,transId string,year int,month string,arrivalTime string ,departureTime string)([]*models.ScheduleDay,error) {
	ret := _m.Called(ctx, transId,year,month,arrivalTime,departureTime)

	var r0 []*models.ScheduleDay
	if rf, ok := ret.Get(0).(func(context.Context, string,int,string,string,string) []*models.ScheduleDay); ok {
		r0 = rf(ctx, transId,year,month,arrivalTime,departureTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ScheduleDay)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string,int,string,string,string) error); ok {
		r1 = rf(ctx, transId,year,month,arrivalTime,departureTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetScheduleByTransIds(ctx context.Context,transId []*string,year int,month string)([]*models.ScheduleDtos,error) {
	ret := _m.Called(ctx, transId,year,month)

	var r0 []*models.ScheduleDtos
	if rf, ok := ret.Get(0).(func(context.Context, []*string,int,string) []*models.ScheduleDtos); ok {
		r0 = rf(ctx, transId,year,month)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ScheduleDtos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*string,int,string) error); ok {
		r1 = rf(ctx, transId,year,month)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitle provides a mock function with given fields: ctx, title
func (_m *Repository) GetCountSchedule(ctx context.Context,merchantId string,date string)(int,error) {
	ret := _m.Called(ctx, merchantId,date)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string,string) int); ok {
		r0 = rf(ctx, merchantId,date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string,string) error); ok {
		r1 = rf(ctx, merchantId,date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, a
func (_m *Repository) Insert(ctx context.Context, a models.Schedule) (*string, error) {
	ret := _m.Called(ctx, a)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, models.Schedule) *string); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Schedule) error); ok {
		r1 = rf(ctx, a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ar
func (_m *Repository) DeleteByTransId(ctx context.Context, transId *string) error {
	ret := _m.Called(ctx, transId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) error); ok {
		r0 = rf(ctx, transId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
