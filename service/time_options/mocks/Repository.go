// Code generated by mockery v1.0.0
package mocks

import (
	context "context"
	"github.com/models"

	mock "github.com/stretchr/testify/mock"
)

// repository is an autogenerated mock type for the repository type
type Repository struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Repository) TimeOptions(ctx context.Context) ([]*models.TimesOption, error) {
	ret := _m.Called(ctx)

	var r0 []*models.TimesOption
	if rf, ok := ret.Get(0).(func(context.Context) []*models.TimesOption); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TimesOption)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetByTime(ctx context.Context, time string) (*models.TimesOption, error) {
	ret := _m.Called(ctx, time)

	var r0 *models.TimesOption
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TimesOption); ok {
		r0 = rf(ctx, time)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TimesOption)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, time)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

