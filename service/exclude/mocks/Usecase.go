// Code generated by mockery v1.0.0
package mocks

import (
	context "context"
	"github.com/models"
)
import mock "github.com/stretchr/testify/mock"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Usecase) List(ctx context.Context) ([]*models.ExcludeDto, error) {
	ret := _m.Called(ctx)

	var r0 []*models.ExcludeDto
	if rf, ok := ret.Get(0).(func(context.Context) []*models.ExcludeDto); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ExcludeDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0,r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Usecase) GetAll(ctx context.Context ,page,limit,offset int)(*models.ExcludeDtoWithPagination,error) {
	ret := _m.Called(ctx, page,limit,offset)

	var r0 *models.ExcludeDtoWithPagination
	if rf, ok := ret.Get(0).(func(context.Context,int,int,int) *models.ExcludeDtoWithPagination); ok {
		r0 = rf(ctx,page,limit,offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExcludeDtoWithPagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int,int,int) error); ok {
		r1 = rf(ctx, page,limit,offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0,r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Usecase) GetById(ctx context.Context,id int)(*models.ExcludeDto,error) {
	ret := _m.Called(ctx, id)

	var r0 *models.ExcludeDto
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.ExcludeDto); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExcludeDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitle provides a mock function with given fields: ctx, title
func (_m *Usecase) Create(ctx context.Context, f *models.NewCommandExclude,token string)(*models.ResponseDelete,error) {
	ret := _m.Called(ctx, f,token)

	var r0 *models.ResponseDelete
	if rf, ok := ret.Get(0).(func(context.Context, *models.NewCommandExclude,string) *models.ResponseDelete); ok {
		r0 = rf(ctx, f,token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseDelete)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.NewCommandExclude,string) error); ok {
		r1 = rf(ctx, f,token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *Usecase) Update(ctx context.Context, f *models.NewCommandExclude,token string)(*models.ResponseDelete,error) {
	ret := _m.Called(ctx, f,token)

	var r0 *models.ResponseDelete
	if rf, ok := ret.Get(0).(func(context.Context, *models.NewCommandExclude,string) *models.ResponseDelete); ok {
		r0 = rf(ctx, f,token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseDelete)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.NewCommandExclude,string) error); ok {
		r1 = rf(ctx, f,token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *Usecase) Delete(ctx context.Context, id int,token string)(*models.ResponseDelete,error) {
	ret := _m.Called(ctx, id,token)

	var r0 *models.ResponseDelete
	if rf, ok := ret.Get(0).(func(context.Context, int,string) *models.ResponseDelete); ok {
		r0 = rf(ctx, id,token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseDelete)
		}
	}


	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int,string) error); ok {
		r1 = rf(ctx, id,token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

