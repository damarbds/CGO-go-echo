// Code generated by mockery v1.0.0
package mocks

import (
	context "context"
	"github.com/models"

	mock "github.com/stretchr/testify/mock"
)

// repository is an autogenerated mock type for the repository type
type Repository struct {
	mock.Mock
}
// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Deletes(ctx context.Context, ids []string, expId string, deletedBy string) error {
	ret := _m.Called(ctx, ids,expId,deletedBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string,string,string) error); ok {
		r0 = rf(ctx, ids,expId,deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteByExpId(ctx context.Context,expId string,deletedBy string)error {
	ret := _m.Called(ctx, expId,deletedBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string,string) error); ok {
		r0 = rf(ctx, expId,deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
// GetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetByExperienceID(ctx context.Context, id string) ([]*models.ExpPhotos, error) {
	ret := _m.Called(ctx, id)

	var r0 []*models.ExpPhotos
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.ExpPhotos); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ExpPhotos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, a
func (_m *Repository) Insert(ctx context.Context, a *models.ExpPhotos) (*string,error) {
	ret := _m.Called(ctx, a)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, *models.ExpPhotos) *string); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.ExpPhotos) error); ok {
		r1 = rf(ctx, a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ar
func (_m *Repository) Update(ctx context.Context, ar *models.ExpPhotos) (*string, error) {
	ret := _m.Called(ctx, ar)

	var r1 *string
	if rf, ok := ret.Get(0).(func(context.Context, *models.ExpPhotos) *string); ok {
		r1 = rf(ctx, ar)
	} else {
		if ret.Get(0) != nil {
			r1 = ret.Get(0).(*string)
		}
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ExpPhotos) error); ok {
		r0 = rf(ctx, ar)
	} else {
		r0 = ret.Error(0)
	}

	return r1,r0
}
