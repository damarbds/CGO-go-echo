//// Code generated by mockery v1.0.0
package mocks
//
//import (
//	context "context"
//
//	"github.com/models"
//
//	mock "github.com/stretchr/testify/mock"
//)
//
//// repository is an autogenerated mock type for the repository type
//type Repository struct {
//	mock.Mock
//}
//
//func (_m *Repository) GetTransportationByBookingId(ctx context.Context,bookingIds string)(*models.Transportation,error) {
//	ret := _m.Called(ctx,bookingIds)
//
//	var r0 *models.Transportation
//	if rf, ok := ret.Get(0).(func(context.Context,string) *models.Transportation); ok {
//		r0 = rf(ctx,bookingIds)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*models.Transportation)
//		}
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(context.Context,string) error); ok {
//		r1 = rf(ctx,bookingIds)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// Delete provides a mock function with given fields: ctx, id
//func (_m *Repository) GetById(ctx context.Context,id string)(*models.Transportation,error) {
//	ret := _m.Called(ctx, id)
//
//	var r0 *models.Transportation
//	if rf, ok := ret.Get(0).(func(context.Context,string) *models.Transportation); ok {
//		r0 = rf(ctx,id)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*models.Transportation)
//		}
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
//		r1 = rf(ctx, id)
//	} else {
//		r1 = ret.Error(0)
//	}
//
//	return r0,r1
//}
//
//// Fetch provides a mock function with given fields: ctx, cursor, num
//func (_m *Repository) UpdateStatus(ctx context.Context, status int,id string,user string)error {
//	ret := _m.Called(ctx, status, id,user)
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(context.Context, int, string,string) error); ok {
//		r1 = rf(ctx, status, id,user)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r1
//}
//
//// GetByID provides a mock function with given fields: ctx, id
//func (_m *Repository) Insert(ctx context.Context, transportation models.Transportation) (*string, error) {
//	ret := _m.Called(ctx, transportation)
//
//	var r0 *string
//	if rf, ok := ret.Get(0).(func(context.Context, models.Transportation) *string); ok {
//		r0 = rf(ctx, transportation)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*string)
//		}
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(context.Context, models.Transportation) error); ok {
//		r1 = rf(ctx, transportation)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// GetByTitle provides a mock function with given fields: ctx, title
//func (_m *Repository) Update(ctx context.Context, transportation models.Transportation) (*string, error) {
//	ret := _m.Called(ctx, code,promoType,merchantId)
//
//	var r0 []*models.Promo
//	if rf, ok := ret.Get(0).(func(context.Context, string,*int,string) []*models.Promo); ok {
//		r0 = rf(ctx, code,promoType,merchantId)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).([]*models.Promo)
//		}
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(context.Context,  string,*int,string) error); ok {
//		r1 = rf(ctx, code,promoType,merchantId)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// Store provides a mock function with given fields: ctx, a
//func (_m *Repository) FilterSearch(ctx context.Context, query string, limit, offset int,isMerchant bool ,qstatus string) ([]*models.TransSearch, error) {
//	ret := _m.Called(ctx, a)
//
//	var r0 *int
//	if rf, ok := ret.Get(0).(func(context.Context, *models.Promo) *int); ok {
//		r0 = rf(ctx, a)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*int)
//		}
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(context.Context, *models.Promo) error); ok {
//		r1 = rf(ctx, a)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// Update provides a mock function with given fields: ctx, ar
//func (_m *Repository) CountFilterSearch(ctx context.Context, query string) (int, error) {
//	ret := _m.Called(ctx, ar)
//
//	var r0 error
//	if rf, ok := ret.Get(0).(func(context.Context, *models.Promo) error); ok {
//		r0 = rf(ctx, ar)
//	} else {
//		r0 = ret.Error(0)
//	}
//
//	return r0
//}
//
//// Store provides a mock function with given fields: ctx, a
//func (_m *Repository) GetTransCount(ctx context.Context, merchantId string) (int, error) {
//	ret := _m.Called(ctx, a)
//
//	var r0 *int
//	if rf, ok := ret.Get(0).(func(context.Context, *models.Promo) *int); ok {
//		r0 = rf(ctx, a)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*int)
//		}
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(context.Context, *models.Promo) error); ok {
//		r1 = rf(ctx, a)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// Update provides a mock function with given fields: ctx, ar
//func (_m *Repository) SelectIdGetByMerchantId(ctx context.Context,merchantId string,date string)([]*string,error) {
//	ret := _m.Called(ctx, ar)
//
//	var r0 error
//	if rf, ok := ret.Get(0).(func(context.Context, *models.Promo) error); ok {
//		r0 = rf(ctx, ar)
//	} else {
//		r0 = ret.Error(0)
//	}
//
//	return r0
//}
