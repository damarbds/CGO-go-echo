// Code generated by mockery v1.0.0
package mocks

import (
	context "context"

	"github.com/models"

	mock "github.com/stretchr/testify/mock"
)

// repository is an autogenerated mock type for the repository type
type Repository struct {
	mock.Mock
}

func (_m *Repository) GetCount(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id string, deletedBy string) error {
	ret := _m.Called(ctx, id, deletedBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, deletedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
func (_m *Repository) GetAllWithJoinCPC(ctx context.Context, page *int, size *int, search string,harborsType string) ([]*models.HarborsWCPC, error) {
	ret := _m.Called(ctx,page,size,search,harborsType)

	var r0 []*models.HarborsWCPC
	if rf, ok := ret.Get(0).(func(context.Context,*int,*int,string,string) []*models.HarborsWCPC); ok {
		r0 = rf(ctx,page,size,search,harborsType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.HarborsWCPC)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context,*int,*int,string,string) error); ok {
		r1 = rf(ctx,page,size,search,harborsType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Repository) Fetch(ctx context.Context, limit int, offset int) ([]*models.Harbors, error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 []*models.Harbors
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*models.Harbors); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Harbors)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetByID(ctx context.Context, id string) (*models.Harbors, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Harbors
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Harbors); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Harbors)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, a
func (_m *Repository) Insert(ctx context.Context, a *models.Harbors) (*string, error) {
	ret := _m.Called(ctx, a)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, *models.Harbors) *string); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Harbors) error); ok {
		r1 = rf(ctx, a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ar
func (_m *Repository) Update(ctx context.Context, ar *models.Harbors) error {
	ret := _m.Called(ctx, ar)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Harbors) error); ok {
		r0 = rf(ctx, ar)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
