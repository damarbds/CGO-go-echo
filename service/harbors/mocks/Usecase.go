// Code generated by mockery v1.0.0
package mocks

import (
	context "context"

	"github.com/models"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Usecase) GetAllWithJoinCPC(ctx context.Context, page *int, size *int, search string,harborsType string) ([]*models.HarborsWCPCDto, error) {
	ret := _m.Called(ctx,page,size,search,harborsType)

	var r0 []*models.HarborsWCPCDto
	if rf, ok := ret.Get(0).(func(context.Context,*int,*int,string,string) []*models.HarborsWCPCDto); ok {
		r0 = rf(ctx,page,size,search,harborsType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.HarborsWCPCDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context,*int,*int,string,string) error); ok {
		r1 = rf(ctx,page,size,search,harborsType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Usecase) GetAll(ctx context.Context, page, limit, offset int) (*models.HarborsDtoWithPagination, error) {
	ret := _m.Called(ctx, page, limit, offset)

	var r0 *models.HarborsDtoWithPagination
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) *models.HarborsDtoWithPagination); ok {
		r0 = rf(ctx, page, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.HarborsDtoWithPagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, page, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Usecase) GetById(ctx context.Context, id string) (*models.HarborsDto, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.HarborsDto
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.HarborsDto); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.HarborsDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitle provides a mock function with given fields: ctx, title
func (_m *Usecase) Create(ctx context.Context, f *models.NewCommandHarbors, token string) (*models.ResponseDelete, error) {
	ret := _m.Called(ctx, f, token)

	var r0 *models.ResponseDelete
	if rf, ok := ret.Get(0).(func(context.Context, *models.NewCommandHarbors, string) *models.ResponseDelete); ok {
		r0 = rf(ctx, f, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseDelete)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.NewCommandHarbors, string) error); ok {
		r1 = rf(ctx, f, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *Usecase) Update(ctx context.Context, f *models.NewCommandHarbors, token string) (*models.ResponseDelete, error) {
	ret := _m.Called(ctx, f, token)

	var r0 *models.ResponseDelete
	if rf, ok := ret.Get(0).(func(context.Context, *models.NewCommandHarbors, string) *models.ResponseDelete); ok {
		r0 = rf(ctx, f, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseDelete)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.NewCommandHarbors, string) error); ok {
		r1 = rf(ctx, f, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *Usecase) Delete(ctx context.Context, id string, token string) (*models.ResponseDelete, error) {
	ret := _m.Called(ctx, id, token)

	var r0 *models.ResponseDelete
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.ResponseDelete); ok {
		r0 = rf(ctx, id, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseDelete)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
