// Code generated by mockery v1.0.0
package mocks

import (
	context "context"
	"github.com/models"

	mock "github.com/stretchr/testify/mock"
)

// repository is an autogenerated mock type for the repository type
type Repository struct {
	mock.Mock
}

// GetByTitle provides a mock function with given fields: ctx, title
func (_m *Repository) GetByMerchantId(ctx context.Context,merchantId string,promoId string)([]*models.PromoMerchant,error) {
	ret := _m.Called(ctx, merchantId,promoId)

	var r0 []*models.PromoMerchant
	if rf, ok := ret.Get(0).(func(context.Context, string,string) []*models.PromoMerchant); ok {
		r0 = rf(ctx, merchantId,promoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PromoMerchant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string,string) error); ok {
		r1 = rf(ctx, merchantId,promoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ar
func (_m *Repository) Insert(ctx context.Context,pm models.PromoMerchant)error {
	ret := _m.Called(ctx, pm)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PromoMerchant) error); ok {
		r0 = rf(ctx, pm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, ar
func (_m *Repository) DeleteByMerchantId(ctx context.Context,merchantId string,promoId string)error {
	ret := _m.Called(ctx, merchantId,promoId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string,string) error); ok {
		r0 = rf(ctx, merchantId,promoId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
