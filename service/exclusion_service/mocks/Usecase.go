// Code generated by mockery v1.0.0
package mocks

import (
	context "context"

	"github.com/models"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *Usecase) List(ctx context.Context, page, limit, offset int, token string) (*models.ExclusionServiceWithPagination, error) {
	ret := _m.Called(ctx, page, limit, offset, token)

	var r0 *models.ExclusionServiceWithPagination
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, string) *models.ExclusionServiceWithPagination); ok {
		r0 = rf(ctx, page, limit, offset, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExclusionServiceWithPagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, string) error); ok {
		r1 = rf(ctx, page, limit, offset, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
